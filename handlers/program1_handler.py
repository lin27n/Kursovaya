import json
from pathlib import Path
from aiogram import Router, types
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from typing import Dict

from handlers.keyboards import get_navigation_buttons

router = Router()

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º
def load_programs():
    with open(Path(__file__).parent.parent / "data" / "programs.json", "r", encoding="utf-8") as f:
        return json.load(f)

programs = load_programs()

# –ö—ç—à –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_selections: Dict[int, str] = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º
def get_programs_keyboard():
    builder = ReplyKeyboardBuilder()
    for program in programs.keys():
        builder.add(types.KeyboardButton(text=program))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True, one_time_keyboard=True)

# Rule-based –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
def process_question(question: str, program_data: Dict) -> str:
    question_lower = question.lower()
    
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ —Å –ø–æ–ª—è–º–∏ –¥–∞–Ω–Ω—ã—Ö
    rules = {
        "–±—é–¥–∂–µ—Ç": ("places", "budget"),
        "–ø–ª–∞—Ç–Ω": ("places", "paid"),
        "—Å—Ç–æ–∏–º–æ—Å—Ç—å": ("tuition_fee",),
        "—Ü–µ–Ω–∞": ("tuition_fee",),
        "–ø—Ä–æ—Ö–æ–¥–Ω": ("passing_score",),
        "–±–∞–ª–ª": ("passing_score",),
        "–º–µ—Å—Ç": ("places",),
        "—Å—Ç–æ–∏—Ç": ("tuition_fee",)
    }
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞
    question_type = None
    target = None  # budget –∏–ª–∏ paid
    
    for keyword, fields in rules.items():
        if keyword in question_lower:
            question_type = fields
            if "–±—é–¥–∂–µ—Ç" in question_lower:
                target = "budget"
            elif "–ø–ª–∞—Ç–Ω" in question_lower:
                target = "paid"
            break
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    if question_type:
        try:
            data = program_data
            for field in question_type:
                data = data[field]
            
            if target and isinstance(data, dict):
                value = data[target]
            else:
                value = data
                
            if "passing_score" in question_type:
                return f"–ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª: {value}"
            elif "places" in question_type:
                return f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç: {value}"
            elif "tuition_fee" in question_type:
                return f"–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è: {value:,} —Ä—É–±/–≥–æ–¥".replace(",", " ")
        except (KeyError, TypeError):
            pass
    
    # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    return format_program_info(program_data)

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
def format_program_info(program_data: Dict) -> str:
    return (
        f"üéì –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\n"
        f"‚ñ™ –ë—é–¥–∂–µ—Ç–Ω—ã–µ –º–µ—Å—Ç–∞: {program_data['places']['budget']}\n"
        f"‚ñ™ –ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª (–±—é–¥–∂–µ—Ç): {program_data['passing_score']['budget']}\n"
        f"‚ñ™ –ü–ª–∞—Ç–Ω—ã–µ –º–µ—Å—Ç–∞: {program_data['places']['paid']}\n"
        f"‚ñ™ –ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª (–ø–ª–∞—Ç–Ω–æ): {program_data['passing_score']['paid']}\n"
        f"‚ñ™ –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è: {program_data['tuition_fee']:,} —Ä—É–±/–≥–æ–¥\n\n"
        f"üîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ: {program_data.get('url', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}"
    ).replace(",", " ")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message(lambda message: message.text == "üéì –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ò–í–ú–ò–∏–¢")
async def handle_programs_list(message: types.Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:",
        reply_markup=get_programs_keyboard()
    )

@router.message(lambda message: message.text in programs.keys())
async def handle_program_selection(message: types.Message):
    program_name = message.text
    user_selections[message.from_user.id] = program_name
    await message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ <b>{program_name}</b>. –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ.\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:\n"
        "‚Ä¢ –°–∫–æ–ª—å–∫–æ –±—é–¥–∂–µ—Ç–Ω—ã—Ö –º–µ—Å—Ç?\n"
        "‚Ä¢ –ö–∞–∫–æ–π –ø—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª –Ω–∞ –ø–ª–∞—Ç–Ω—É—é –æ—Å–Ω–æ–≤—É?\n"
        "‚Ä¢ –ö–∞–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è?\n\n<b>–ü–∏—à–∏—Ç–µ —á–µ—Ç–∫–æ –∏ –±–µ–∑ –æ–ø–µ—á–∞—Ç–æ–∫</b>",
        reply_markup=types.ReplyKeyboardRemove(),
        parse_mode="HTML"
    )

@router.message(lambda message: message.from_user.id in user_selections)
async def handle_program_question(message: types.Message):
    program_name = user_selections[message.from_user.id]
    program_data = programs[program_name]
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å
    response = process_question(message.text, program_data)
    
    await message.answer(
        f"<b>{program_name}</b>\n\n{response}",
        parse_mode="HTML",
        reply_markup=get_navigation_buttons()
    )
