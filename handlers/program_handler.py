import asyncio
from aiogram import Router, types
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from pathlib import Path
import json
import logging
from transformers import pipeline
import torch
from typing import Dict, Optional
from config import Config
from handlers.keyboards import get_navigation_buttons

router = Router()

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º
def load_programs():
    try:
        with open(Path(__file__).parent.parent / "data" / "programs.json", "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ programs.json: {e}")
        return {}

programs = load_programs()

# --- –ö—ç—à –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
user_selections: Dict[int, Dict] = {}  # {user_id: {"program": name, "questions_count": int}}

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def get_programs_keyboard():
    builder = ReplyKeyboardBuilder()
    for program in programs.keys():
        builder.add(types.KeyboardButton(text=program))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True, one_time_keyboard=True)

# --- –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ ---
_qa_model = None

def get_llm():
    global _qa_model
    if _qa_model is None:
        try:
            _qa_model = pipeline(
                "question-answering",
                model=Config.MODEL_NAME,
                device="cuda" if torch.cuda.is_available() else "cpu",
                torch_dtype=torch.float16 if torch.cuda.is_available() else None
            )
            logger.info("LLM –º–æ–¥–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ LLM: {e}")
    return _qa_model

# --- –£–ª—É—á—à–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ ---
async def generate_llm_answer(question: str, program_name: str) -> Optional[str]:
    try:
        context = programs[program_name].get("llm_context", "")
        if not context:
            return None
            
        # –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        result = get_llm()(
            question=f"–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω–æ –∏ –∫—Ä–∞—Ç–∫–æ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –Ω–∏–∂–µ. "
                     f"–ï—Å–ª–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö, —Å–∫–∞–∂–∏ '–ù–µ –Ω–∞—à–µ–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ'. "
                     f"–í–æ–ø—Ä–æ—Å: {question}",
            context=context,
            max_answer_len=200
        )
        
        answer = result["answer"].strip()
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        if not answer or answer.lower() in ["–Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", "–Ω–µ –∑–Ω–∞—é"]:
            return None
            
        if not answer.endswith((".", "!", "?")):
            answer += "."
            
        return answer.capitalize()
    except Exception as e:
        logger.error(f"LLM error: {e}")
        return None

def get_program_info(program_name: str) -> str:
    data = programs[program_name]
    return (
        f"üéì <b>{program_name}</b>\n\n"
        f"‚ñ™ –ë—é–¥–∂–µ—Ç–Ω—ã–µ –º–µ—Å—Ç–∞: {data['places']['budget']} (–±–∞–ª–ª: {data['passing_score']['budget']})\n"
        f"‚ñ™ –ü–ª–∞—Ç–Ω—ã–µ –º–µ—Å—Ç–∞: {data['places']['paid']} (–±–∞–ª–ª: {data['passing_score']['paid']})\n"
        f"‚ñ™ –°—Ç–æ–∏–º–æ—Å—Ç—å: {data['tuition_fee']:,} —Ä—É–±/–≥–æ–¥\n\n"
        f"üîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ: {data.get('url', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}"
    ).replace(",", " ")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ---
@router.message(lambda message: message.text == "üéì –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ò–í–ú–ò–∏–¢")
async def handle_programs_list(message: types.Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:",
        reply_markup=get_programs_keyboard()
    )

@router.message(lambda message: message.text in programs.keys())
async def handle_program_selection(message: types.Message):
    program_name = message.text
    user_selections[message.from_user.id] = {
        "program": program_name,
        "questions_count": 0
    }
    
    temp_msg = await message.answer(
        "–ó–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await asyncio.sleep(0.5)
    await temp_msg.delete()
    
    await message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ <b>{program_name}</b>. –ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ.\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:\n"
        "‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—é–¥–∂–µ—Ç–Ω—ã—Ö –º–µ—Å—Ç?\n"
        "‚Ä¢ –°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –æ–±—É—á–µ–Ω–∏–µ?\n"
        "‚Ä¢ –ö–∞–∫–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –∏–∑—É—á–∞—é—Ç?\n\n"
        "–ß—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'",
        reply_markup=get_navigation_buttons(),
        parse_mode="HTML"
    )

@router.message(lambda message: message.from_user.id in user_selections)
async def handle_program_question(message: types.Message):
    user_data = user_selections[message.from_user.id]
    program_name = user_data["program"]
    user_data["questions_count"] += 1
    
    llm_answer = await generate_llm_answer(message.text, program_name)
    
    if llm_answer:
        response = f"<b>{program_name}</b>\n\n{llm_answer}"
    else:
        response = (f"–ü–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ.\n"
                   f"–í–æ—Ç –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ:\n\n"
                   f"{get_program_info(program_name)}")
    
    await message.answer(
        response,
        reply_markup=get_navigation_buttons(),
        parse_mode="HTML"
    )
