# -*- coding: utf-8 -*-
import json
import logging
from aiogram import Router, types
from pathlib import Path
from difflib import SequenceMatcher

from handlers.keyboards import get_navigation_buttons

router = Router()

KFU_KEYWORDS = [
    "–∫—Ñ—É", "–∫–∞–∑–∞–Ω", "—É–Ω–∏–≤–µ—Ä", "–ø–æ—Å—Ç—É–ø", "–±—é–¥–∂–µ—Ç", "–æ–±—â–µ–∂–∏—Ç", 
    "–¥–æ–∫—É–º–µ–Ω—Ç", "—Ñ–∞–∫—É–ª—å—Ç–µ—Ç", "—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç", "–µ–≥—ç", "–≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω",
    "–ø—Ä–∏–µ–º–Ω", "–±–∞–ª–ª", "–∑–∞—á–∏—Å–ª", "–º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä", "–±–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç", "–ø—Ä–æ—Ö–æ–¥–Ω"
]

@router.message(lambda message: message.text == "‚ùì –ü—Ä–∏–µ–º–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è –ö–§–£")
async def handle_admission(message: types.Message):
    await message.answer(
        "–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö, —Å—Ä–æ–∫–∞—Ö –ø–æ–¥–∞—á–∏ –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –æ–±—â–∏—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö:",
        reply_markup=types.ReplyKeyboardRemove(),
    )

# –ó–∞–≥—Ä—É–∑–∫–∞ –∂–µ—Å—Ç–∫–∏—Ö –ø—Ä–∞–≤–∏–ª
try:
    with open(Path(__file__).parent.parent / "data" / "faq.json", "r", encoding="utf-8") as f:
        hard_rules = json.load(f)
    logging.info("–ü—Ä–∞–≤–∏–ª–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
except Exception as e:
    logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∞–≤–∏–ª: {e}")
    hard_rules = {}

def find_best_match(user_text: str, threshold: float = 0.65) -> dict:
    #–ù–∞—Ö–æ–¥–∏—Ç –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–æ–ø—Ä–æ—Å –≤ –±–∞–∑–µ
    user_text = user_text.lower().strip()
    best_match = None
    best_score = 0
    
    for topic in hard_rules["topics"]:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—Ä–∞–∑—É
        score = SequenceMatcher(None, user_text, topic["main_question"]).ratio()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã
        for synonym in topic["synonyms"]:
            current_score = SequenceMatcher(None, user_text, synonym).ratio()
            if current_score > score:
                score = current_score
                
        if score > best_score and score >= threshold:
            best_score = score
            best_match = topic
    
    return best_match

def format_response(topic: dict) -> str:
    #–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å —Å—Å—ã–ª–∫–∞–º–∏
    response = topic["answer"]
    if "links" in topic:
        response += "\n\nüîó " + "\n".join(
            f" {link['text']}: {link['url']}" for link in topic["links"]
        )
    return response

def is_about_kfu(text: str) -> bool:
    #–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –≤–æ–ø—Ä–æ—Å –∫ –ö–§–£
    text = text.lower()
    return any(keyword in text for keyword in KFU_KEYWORDS)

@router.message()
async def handle_text(message: types.Message):

    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å.")
        return

    user_text = message.text.lower()

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–º–∞—Ç–∏–∫–∏
    if not is_about_kfu(user_text):
        await message.answer("–Ø –æ—Ç–≤–µ—á–∞—é —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –ö–§–£. –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ–± —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ.")
        return

    # 2. –ü–æ–∏—Å–∫ –≤ –∂–µ—Å—Ç–∫–∏—Ö –ø—Ä–∞–≤–∏–ª–∞—Ö
    matched_topic = find_best_match(user_text)
    
    if matched_topic:
        try:
            response = format_response(matched_topic)
            await message.answer(response, reply_markup=get_navigation_buttons())
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: {str(e)}")
            fallback_msg = matched_topic.get("answer", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ —Å–∞–π—Ç–µ: https://kpfu.ru")
            await message.answer(fallback_msg, reply_markup=get_navigation_buttons())
    else:
        logging.info(f"–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ FAQ: {user_text}")
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç —Å —Å—Å—ã–ª–∫–æ–π –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –≤–Ω–µ FAQ
        await message.answer(
            "–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –Ω–∞–ø—Ä—è–º—É—é:\n\n"
            "üîó –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø—Ä–∏–µ–º–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏: https://admissions.kpfu.ru/bakalavriat-specialitet/obratnaya-svyaz/zadat-vopros/\n"
            "üîó –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç –ö–§–£: https://kpfu.ru",
            reply_markup=get_navigation_buttons()
        )